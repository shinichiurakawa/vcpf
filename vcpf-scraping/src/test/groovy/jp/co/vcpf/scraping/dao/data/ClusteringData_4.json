{"title":"Spring Boot????????????","link":"https://qiita.com/hiroshi_maz/items/b2e916144523614837a6","content":"Qiita Community SignupLogin Java spring-boot 55 @hiroshi_maz Spring Bootでデータベースに接続する Javaspring-boot 55 More than 1 year has passed since last update. 少し時間が空いてしまいましたが前回の続きから。 pom.xmlを編集する。 公式ドキュメントの26.1.1 Embedded Database Supportを見つつ、自分の環境に合わせてpom.xmlに次の情報を書き足す。 pom.xml <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n  <groupId>mysql</groupId>\n  <artifactId>mysql-connector-java</artifactId>\n  <scope>runtime</scope>\n</dependency>\n application.ymlを編集する。 21.2 Application property filesで、アプリケーションプロパティファイルは、 　・クラスパスの\"/config\"ディレクトリに置くこと 　・application.properties, application.ymlのどちらも良いこと を知り、26.1.2 Connection to a production databaseで設定内容を知ったので、 \"src/main/resources\"の下に\"cnfig\"ディレクトリを作り、更にその下に\"application.yml\"を作る。 application.yml spring:\n  datasource:\n    url: jdbc:mysql://localhost/testdb1\n    username: testuser\n    password: testuser\n    driverClassName: com.mysql.jdbc.Driver\n Entityクラスを作る。 26.3 JPA and ‘Spring Data’を見ながらEntityクラスを作る。 Configurations.java package com.example.sample.domain;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Configurations {\n\n    @Id\n    private String name;\n\n    private String value;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n\n}\n Repositoryインタフェースを作る。 26.3.2 Spring Data JPA Repositoriesを見ながらRepositoryクラスを作る。 ConfigurationsRepository.class package com.example.sample.domain;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.Repository;\n\n\npublic interface ConfigurationsRepository extends Repository<Configurations, String> {\n\n    Page<Configurations> findAll(Pageable pageable);\n\n}\n コントローラクラスを修正する。 データベースに接続して、取得したデータを標準出力に出力するようコントローラクラスを修正する。 package com.example.sample;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport com.example.sample.domain.Configurations;\nimport com.example.sample.domain.ConfigurationsRepository;\n\n@Controller\n@EnableAutoConfiguration\npublic class Application {\n\n    @Autowired\n    ConfigurationsRepository configurationsRepository;\n\n    @RequestMapping(\"/\")\n    public String home() {\n        System.out.println(\"[START] データベースに接続してデータを取得します。\");\n        Page<Configurations> configs = configurationsRepository.findAll(new PageRequest(0, 10));\n        for (Configurations config : configs) {\n            System.out.println(config.getName() + \" = \" + config.getValue());\n        }\n        System.out.println(\"[END  ] データベースに接続してデータを取得します。\");\n        return \"index\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n サーバを起動する。 ブラウザからlocalhost:8080にアクセスして、標準出力にデータベースから取得したデータが出力されるか確認する。 Edit request Stock Like55 hiroshi_maz pom.xmlを編集する。 application.ymlを編集する。 Entityクラスを作る。 Repositoryインタフェースを作る。 コントローラクラスを修正する。 サーバを起動する。 © 2011-2018 Increments Inc. Terms Privacy Help Contact About Users Tags Items Blog API Qiita:Team"}