{"title":"Spring Boot + JPA + MySQL?REST API?????","link":"https://qiita.com/kaikusakari/items/7414f194708bc50c5b8f","content":"Qiita Community SignupLogin MySQL jpa SpringBoot 0 @kaikusakari Spring Boot + JPA + MySQLでREST APIを実装する MySQLjpaSpringBoot 0 表題に向けて実装します。今回はこれまで作成したThymeleafを呼ぶコントローラは残したまま、新しいREST APIコントローラを追加します。また、DBへの接続にjdbcを利用していましたが、ORマッパのSpring Data JPAを利用するように変更します。 共通部分の修正 追加・修正ファイル usersテーブルの定義 com.example.User.java package com.example;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @Column(name = \"id\")\n    private int id;\n    @Column(name = \"name\")\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n DBに接続するサービスクラス定義 com.example.Repository.UsersRepository.java package com.example.Repository;\n\nimport java.util.List;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport com.example.User;\n\npublic interface UsersRepository extends JpaRepository<User, Integer> {\n    public List<User> findById(int id);\n}\n DB接続の設定 driver-class-nameが古かったので修正 src/main/resources/application.properties spring.datasource.url=jdbc:mysql://127.0.0.1:3306/DB名\nspring.datasource.username=ユーザ名\nspring.datasource.password=パスワード\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n 依存の設定 ORマッパを利用するため追加 pom.xml <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n APIの仕様 DB 以下のようにusersテーブルを作成して、テーブルに対してRESTでデータを操作します。 CREATE TABLE user (\n  id int AUTO_INCREMENT,\n  name varchar(254),\n  INDEX(id)\n);\n API一覧 NO METHOD url 動作 1 GET /users テーブル全件参照 2 GET /users/id id指定した1件参照 3 POST /users レコード登録 4 PUT /users/id 1レコード更新 5 DELETE /users/id 1レコード削除 1 GET /users com.example.UsersController.java @Autowired\nprivate UsersRepository repository;\n\n@RequestMapping(path = \"/users\", method = RequestMethod.GET)\n@Transactional\npublic List<User> get() {\n    return repository.findAll();\n}\n requestBody\n\nresponseBody\n[\n    {\"id\":1,\"name\":\"kusakarikai1\"},\n    {\"id\":2,\"name\":\"kusakarikai2\"}\n]\n 2 GET /users/id com.example.UsersController.java @Autowired\nprivate UsersRepository repository;\n\n@RequestMapping(path = \"/users/{id}\", method = RequestMethod.GET)\npublic List<User> show(Model model, @PathVariable(\"id\") int id) {\n    return repository.findById(id);\n}\n requestBody\n\nresponseBody\n[\n    {\"id\":1, \"name\":\"kusakarikai1\"}\n]\n 3 POST /users com.example.UsersController.java @Autowired\nprivate UsersRepository repository;\n\n@RequestMapping(path = \"/users\", method = RequestMethod.POST)\n@ResponseStatus(HttpStatus.CREATED)\npublic User create(Model model, @RequestBody User user) {\n    return repository.save(user);\n}\n requestBody\n{\"name\":\"kusa_create\"}\n\nresponseBody\n[\n    {\"id\":1, \"name\":\"kusa_create\"}\n]\n 4 PUT /users/id com.example.UsersController.java @Autowired\nprivate UsersRepository repository;\n\n@RequestMapping(path = \"/users/{id}\", method = RequestMethod.PUT)\npublic User update(Model model, @PathVariable(\"id\") int id, @RequestBody User user) {\n    user.setId(id);\n    return repository.save(user);\n}\n requestBody\n{\"name\":\"kusa_update\"}\n\nresponseBody\n[\n    {\"id\":1, \"name\":\"kusa_update\"}\n]\n 5 DELETE /users/id com.example.UsersController.java @Autowired\nprivate UsersRepository repository;\n\n@RequestMapping(path = \"/users/{id}\", method = RequestMethod.DELETE)\npublic void destory(Model model, @PathVariable(\"id\") int id) {\n    repository.delete(id);\n}\n requestBody\n\nresponceBody\n\n ソースは以下です。 https://github.com/kaikusakari/spring_crud Edit request Stock Like0 草苅 快kaikusakari I'm noob. 共通部分の修正 APIの仕様 1 GET /users 2 GET /users/id 3 POST /users 4 PUT /users/id 5 DELETE /users/id © 2011-2018 Increments Inc. Terms Privacy Help Contact About Users Tags Items Blog API Qiita:Team"}