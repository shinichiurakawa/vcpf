{"title":"Groovy????Spring Boot, Data JPA, MySQL????????","link":"https://qiita.com/quwahara/items/6567fd54772a879a7a6f","content":"Qiita Community SignupLogin Eclipse Groovy jpa spring-boot 18 @quwahara Groovyを使ったSpring Boot, Data JPA, MySQL操作の簡単な実装 EclipseGroovyjpaspring-boot 18 More than 1 year has passed since last update. 環境 OS X Yosemite 10.10.3 jdk1.8.0_45.jdk MySQL Server version: 5.5.28 Source distribution Spring Tool Suite Version: 3.6.4.RELEASE Build Id: 201503100337 Platform: Eclipse Kepler SR2 (4.3.2) Gradle IDE plugin Version: 3.6.4.201503050952-RELEASE Groovy-Eclipse plugin Version: 2.9.2.xx-201502282108-e43j8 前提条件 下の状態に実装を加えます Spring Boot/Groovy/EclipseでHello world http://qiita.com/quwahara/items/f4b1d30855fff83da3b8 Data JPAとMySQL Connectorの依存関係をbuild.gradleに設定する 前提条件のbuild.gradleに// Addを追記 build.gradle \n// 省略\n\ndependencies {\n    // Add\n    compile 'org.springframework.boot:spring-boot-starter-data-jpa'\n    // Add\n    compile 'mysql:mysql-connector-java'\n\n    compile 'org.codehaus.groovy:groovy-all'\n    compile 'org.springframework.boot:spring-boot-starter-web'\n\n    // 省略\n}\n\n// 省略\n Package ExplorerでProjectのRoot要素を右クリック、Gradle → Refresh All Data Model(Domain)と操作(Repository)を追加 src/main/java/hello/domain/Memo.groovy package hello.domain\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\nclass Memo {\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    @Column(nullable = false, unique = true, updatable = false)\n    Long id\n\n    @Column(nullable = false)\n    String text\n\n    @Column(nullable = false)\n    Date creationDate\n\n}\n src/main/java/hello/service/MemoRepository.groovy package hello.service\n\nimport hello.domain.Memo\n\nimport org.springframework.data.repository.CrudRepository\n\n\ninterface MemoRepository extends CrudRepository<Memo, Long> {\n\n}\n Controllerを追加 src/main/java/hello/controller/MemoController.groovy package hello.controller\n\nimport hello.domain.Memo\nimport hello.service.MemoRepository\n\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.stereotype.Controller\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseBody\n\n\n@Controller\nclass MemoController {\n\n    @Autowired\n    private MemoRepository memoRepository\n\n    @RequestMapping(\"/memo/new\")\n    @ResponseBody\n    Memo new_(@RequestParam(required=false) String text) {\n        Memo memo = new Memo(text:text?:\"\", creationDate:new Date())\n        return memoRepository.save(memo)\n    }\n\n    @RequestMapping(\"/memo/find-all\")\n    @ResponseBody\n    List<Memo> findAll() {\n        return memoRepository.findAll()\n    }\n\n    @RequestMapping(\"/memo/find/{id}\")\n    @ResponseBody\n    List<Memo> find(@PathVariable Long id) {\n        Memo memo = memoRepository.findOne(id)\n        return (memo?[memo]:[]) as Memo[]\n    }\n}\n Component Scanを指定 src/main/java/hello/SampleController.groovy package hello;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n// Add\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n// Add\n@ComponentScan\n@EnableAutoConfiguration\npublic class SampleController {\n    // 省略\n}\n application.propertiesにDatabase接続設定を追加 src/main/resources/application.properties # DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost/gpdb?characterEncoding=UTF-8\nspring.datasource.username=user\nspring.datasource.password=password\n\n# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\nspring.jpa.show-sql=false\nspring.jpa.database-platform=org.hibernate.dialect.MySQLDialect\nspring.jpa.database=MYSQL\n# validate | update | create | create-drop\nspring.jpa.hibernate.ddl-auto=create-drop\n アプリケーションを実行 Package Explorerでhello/SampleController.groovyを選択、右クリック Debug As → Spring Boot App ブラウザで下のURLを開く http://localhost:8080/memo/new http://localhost:8080/memo/find-all http://localhost:8080/memo/find/1 参考 Source https://github.com/quwahara/GP/tree/spring-jpa-groovy 次の記事 Thyemeleafの簡単な実装 http://qiita.com/quwahara/items/a5e8b4c5d1b039b99730 Edit request Stock Like18 光昭 桑原quwahara Twitter is @quwahara 環境 Spring Tool Suite 前提条件 Data JPAとMySQL Connectorの依存関係をbuild.gradleに設定する Data Model(Domain)と操作(Repository)を追加 Controllerを追加 Component Scanを指定 application.propertiesにDatabase接続設定を追加 アプリケーションを実行 参考 次の記事 © 2011-2018 Increments Inc. Terms Privacy Help Contact About Users Tags Items Blog API Qiita:Team"}