{"title":"Spring Boot + Thymeleaf + MySQL?CRUD?????","link":"https://qiita.com/kaikusakari/items/c14302d266868c5b31fd","content":"Qiita Community SignupLogin Java MySQL Thymeleaf SpringBoot 5 @kaikusakari Spring Boot + Thymeleaf + MySQLでCRUDを実装する JavaMySQLThymeleafSpringBoot 5 More than 1 year has passed since last update. 前回、以下の記事を書きました。 Spring Boot + ThymeleafでWEBアプリを動かす 今回は同様の構成で、REST型でWebアプリにアクセスしてDBのデータを操作します。一番最初に表示する画面でテーブルのレコードを一覧表示しておき、その画面からデータ登録、既存データの更新、既存データの削除を実施するようなアプリになります。 構成は前回の記事のものに加えて、DBにMySQLを利用します。なお本記事ではMySQLの構築手順は省略します。また、DB接続にO/Rマッパは利用せずJDBCのみを使っています。 Mac OS X 10.12 Java 1.8.0_92 Spring Tool Suite 3.8.4 Spring Boot 1.5.3 thymeleaf 2.1.5 API一覧 以下の通り5通りのAPIを作成します NO METHOD url 動作 1 GET /sample/ テーブル全件参照 2 GET /sample/:id id指定した1件参照 3 POST /sample/ レコード登録 4 PUT /sample/:id 1レコード更新 5 DELETE /sample/:id 1レコード削除 共通部分 前回の記事で利用した「SampleController.java」に上記のAPIを構築します。MySQLにはuserというテーブルを作成して、テーブルに対してRESTでデータを操作します。 DB CREATE DATABASE mysql CHARACTER SET UTF8;\nCREATE TABLE user (\n  id int AUTO_INCREMENT,\n  name varchar(254)\n);\nINSERT INTO user (id, name) VALUES (1, \"kusakarikai\");\n 追加・修正ファイル userテーブルの定義 com.example.User.java package com.example;\n\npublic class User {\n    private int id;\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n ActionForm com.example.UserForm.java package com.example;\n\npublic class UserForm {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n ORマップ定義 ResultSet.next()をwhileでループさせると、最初の要素が読まれない事象が解決できずループの前に直接書いています。 com.example.UserMapper.java package com.example;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.jdbc.core.RowMapper;\n\npublic class UserMapper implements RowMapper<List<User>> {\n    public List<User> mapRow(ResultSet rs, int rowNum)\n　　　　　throws SQLException {\n        List<User> list = new ArrayList<>();\n        User tmp_user = new User();\n        tmp_user.setId(rs.getInt(\"id\"));\n        tmp_user.setName(rs.getString(\"name\"));\n        list.add(tmp_user);\n        while (rs.next()) {\n            User user = new User();\n            user.setId(rs.getInt(\"id\"));\n            user.setName(rs.getString(\"name\"));\n            list.add(user);\n        }\n        return list;\n    }\n}\n DB接続の設定 src/main/resources/application.properties spring.datasource.url=jdbc:mysql://127.0.0.1:3306/DB名\nspring.datasource.username=ユーザ名\nspring.datasource.password=パスワード\nspring.datasource.driver-class-name=org.gjt.mm.mysql.Driver\n 依存の設定 pom.xml <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n 1　GET /sample/ userテーブルのレコードを全件取得して、一覧表示します。 Controller com.example.SampleController.java @Autowired\nprivate JdbcTemplate jdbcTemplate;\n\n@RequestMapping(path = \"/sample\", method = RequestMethod.GET)\nString index(Model model) {\n    List<User> list = jdbcTemplate.queryForObject(\"select * from user\", new UserMapper());\n    model.addAttribute(\"list\", list);\n    return \"sample/index\";\n}\n template src/main/resources/templates/sample/index.html <table class=\"list\">\n  <tr>\n    <th>ID</th>\n    <th>名前</th>\n  </tr>\n  <tr th:each=\"list:${list}\">\n    <td th:text=\"${list.id}\"></td>\n    <td th:text=\"${list.name}\"></td>\n  </tr>\n</table>\n 2　GET /sample/:id userテーブルのレコードを1件取得します。 Controller com.example.SampleController.java @Autowired\nprivate JdbcTemplate jdbcTemplate;\n\n@RequestMapping(path = \"/sample/{id}\", method = RequestMethod.GET)\nString show(Model model, @PathVariable(\"id\") int id) {\n    List<User> list = jdbcTemplate.queryForObject(\"select * from user where id = ? \", new Object[] { id }, new UserMapper());\n    model.addAttribute(\"list\", list);\n    return \"sample/index\";\n}\n template 省略(NO1と同様) 3　POST /sample 入力をuserテーブルに登録します。登録後はNO1のAPIにリダイレクトすることで一覧を取得して画面に表示します。 Controller com.example.SampleController.java @Autowired\nprivate JdbcTemplate jdbcTemplate;\n\n@ModelAttribute\nUserForm userForm() {\n    return new UserForm();\n}\n\n@RequestMapping(path = \"/sample\", method = RequestMethod.POST)\nString create(Model model, @ModelAttribute UserForm userForm) {\n  　　jdbcTemplate.update(\"INSERT INTO user (name) values (?)\", userForm.getName());\n　　  return \"redirect:/sample\";\n}\n template src/main/resources/templates/sample/index.html <form method=\"post\" name=\"create\" action=\"/sample\" accept-charset=\"UTF8\">\n    <input type=\"text\" name=\"name\"/>\n    <input type=\"submit\" value=\"新規登録\" />\n</form>\n 4　PUT /sample/:id 既存の登録内容を更新します。登録後はNO1のAPIにリダイレクトすることで一覧を取得して画面に表示します。 Controller com.example.SampleController.java @Autowired\nprivate JdbcTemplate jdbcTemplate;\n\n@ModelAttribute\nUserForm userForm() {\n    return new UserForm();\n}\n\n@RequestMapping(path = \"/sample/{id}\", method = RequestMethod.PUT)\nString update(Model model, @ModelAttribute UserForm userForm, @PathVariable(\"id\") int id) {\n    jdbcTemplate.update(\"UPDATE user SET name = ? where id = ? \", userForm.getName(), id);\n    return \"redirect:/sample\";\n}\n template src/main/resources/templates/sample/index.html <form method=\"post\" action=\"/sample/:id\">\n    <input type=\"hidden\" name=\"_method\" value=\"put\">\n    <input type=\"text\" name=\"name\">\n    <input type=\"submit\">\n</form>\n 5　DELETE /sample/:id 既存の登録内容を削除します。登録後はNO1のAPIにリダイレクトすることで一覧を取得して画面に表示します。 Controller com.example.SampleController.java @Autowired\nprivate JdbcTemplate jdbcTemplate;\n\n@RequestMapping(path = \"/sample/{id}\", method = RequestMethod.DELETE)\nString destory(Model model, @PathVariable(\"id\") int id) {\n    jdbcTemplate.update(\"delete from user where id = ? \", id);\n    return \"redirect:/sample\";\n}\n template src/main/resources/templates/sample/index.html <a href=\"javascript:void(0);\" onclick=\"destory_func();\">削除</a>\nfunction destory_func() {\n    var form = document.createElement(\"form\");\n    var hidden = document.createElement(\"input\");\n    form.method = \"post\";\n    form.action = \"/sample/\" + id;\n    hidden.type = \"hidden\";\n    hidden.name = \"_method\"\n    hidden.value = \"delete\";\n    form.appendChild(hidden);\n    document.body.appendChild(form);\n    form.submit();\n}\n 以上、5APIに沿ってControllerとtemplateを実装しました。いくつかの書籍や、フレームワークのプログラムを見ながら進めていますが、実装の意図などからソフトウェアの全体像が少しずつ掴めてきて面白いです。 本記事は動作に必要な部分だけ抜き出していますが、ソースは以下にありますので必要な方はお願いいたします。 github kaikusakari/spring_crud Edit request Stock Like5 草苅 快kaikusakari I'm noob. API一覧 共通部分 1　GET /sample/ 2　GET /sample/:id 3　POST /sample 4　PUT /sample/:id 5　DELETE /sample/:id © 2011-2018 Increments Inc. Terms Privacy Help Contact About Users Tags Items Blog API Qiita:Team"}